//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторного создания кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AudioPlayerService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AudioResponse", Namespace="http://schemas.datacontract.org/2004/07/AudioPlayerWCF.Responses")]
    public partial class AudioResponse : object
    {
        
        private int DurationField;
        
        private int IdField;
        
        private string PathField;
        
        private AudioPlayerService.PerformerDTO PerformerField;
        
        private string TitleField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Duration
        {
            get
            {
                return this.DurationField;
            }
            set
            {
                this.DurationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path
        {
            get
            {
                return this.PathField;
            }
            set
            {
                this.PathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AudioPlayerService.PerformerDTO Performer
        {
            get
            {
                return this.PerformerField;
            }
            set
            {
                this.PerformerField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title
        {
            get
            {
                return this.TitleField;
            }
            set
            {
                this.TitleField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PerformerDTO", Namespace="http://schemas.datacontract.org/2004/07/AudioPlayerWCF.Dto")]
    public partial class PerformerDTO : object
    {
        
        private int AudiosCountField;
        
        private int IdField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AudiosCount
        {
            get
            {
                return this.AudiosCountField;
            }
            set
            {
                this.AudiosCountField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AudioPlayerService.IAudioPlayerService")]
    public interface IAudioPlayerService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioPlayerService/GetAudios", ReplyAction="http://tempuri.org/IAudioPlayerService/GetAudiosResponse")]
        System.Threading.Tasks.Task<AudioPlayerService.AudioResponse> GetAudiosAsync(int page, int limit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAudioPlayerService/GetSum", ReplyAction="http://tempuri.org/IAudioPlayerService/GetSumResponse")]
        System.Threading.Tasks.Task<int> GetSumAsync(int page, int limit);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public interface IAudioPlayerServiceChannel : AudioPlayerService.IAudioPlayerService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public partial class AudioPlayerServiceClient : System.ServiceModel.ClientBase<AudioPlayerService.IAudioPlayerService>, AudioPlayerService.IAudioPlayerService
    {
        
        /// <summary>
        /// Реализуйте этот разделяемый метод для настройки конечной точки службы.
        /// </summary>
        /// <param name="serviceEndpoint">Настраиваемая конечная точка</param>
        /// <param name="clientCredentials">Учетные данные клиента.</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public AudioPlayerServiceClient() : 
                base(AudioPlayerServiceClient.GetDefaultBinding(), AudioPlayerServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IAudioPlayerService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AudioPlayerServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(AudioPlayerServiceClient.GetBindingForEndpoint(endpointConfiguration), AudioPlayerServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AudioPlayerServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(AudioPlayerServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AudioPlayerServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(AudioPlayerServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AudioPlayerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<AudioPlayerService.AudioResponse> GetAudiosAsync(int page, int limit)
        {
            return base.Channel.GetAudiosAsync(page, limit);
        }
        
        public System.Threading.Tasks.Task<int> GetSumAsync(int page, int limit)
        {
            return base.Channel.GetSumAsync(page, limit);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IAudioPlayerService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IAudioPlayerService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8080/AudioPlayerService");
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return AudioPlayerServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IAudioPlayerService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return AudioPlayerServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IAudioPlayerService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IAudioPlayerService,
        }
    }
}
